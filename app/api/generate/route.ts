import { generateText } from "ai";
import { google } from "@ai-sdk/google";
import { NextRequest, NextResponse } from "next/server";
import { db } from "@/firebase/admin";

function getRandomInterviewCover() {
  const colors = ["blue", "green", "purple", "orange", "red"];
  return `/api/interview/cover?color=${colors[Math.floor(Math.random() * colors.length)]}`;
}

export async function POST(request: NextRequest) {
  let body;
  try {
    body = await request.json();
  } catch (error) {
    return NextResponse.json({ success: false, message: "Invalid JSON body" }, { status: 400 });
  }

  const { type, role, level, techstack, amount, userid } = body;

  // Input Validation
  const requiredFields = { type, role, level, techstack, amount, userid };
  for (const [key, value] of Object.entries(requiredFields)) {
    if (!value) {
      return NextResponse.json(
        { success: false, message: `Missing required field: ${key}` },
        { status: 400 }
      );
    }
  }

  const questionAmount = parseInt(amount);
  if (isNaN(questionAmount) || questionAmount <= 0) {
    return NextResponse.json(
      { success: false, message: "Amount must be a positive number" },
      { status: 400 }
    );
  }

  try {
    const geminiModel = google("models/gemini-1.5-flash-latest");

    const { text: questionsText } = await generateText({
      model: geminiModel,
      prompt: `Prepare ${questionAmount} questions for a job interview.
        The job role is ${role}.
        The job experience level is ${level}.
        The tech stack used in the job is: ${techstack}.
        The focus between behavioural and technical questions should lean towards: ${type}.
        Please return ONLY a valid JSON array of strings, where each string is one question.
        Example format: ["Question 1?", "Question 2?", "Question 3?"]
        Do not include any introductory text, explanations, markdown formatting, or anything else outside the JSON array itself.
        The questions are going to be read by a voice assistant so do not use characters like '/' or '*' which might break the voice assistant. Ensure questions end with appropriate punctuation like '?'.
      `,
    });

    let questions = [];
    try {
      const jsonMatch = questionsText.match(/(\[\s\S]*?\])/);
      if (!jsonMatch || !jsonMatch[0]) {
        const cleanedText = questionsText.replace(/```json|```/g, "").trim();
        if (cleanedText.startsWith("[") && cleanedText.endsWith("]")) {
           questions = JSON.parse(cleanedText);
        } else {
          throw new Error("Could not find valid JSON array brackets in the response.");
        }
      } else {
        questions = JSON.parse(jsonMatch[0]);
      }
      
      if (!Array.isArray(questions) || questions.some(q => typeof q !== 'string')) {
        throw new Error("Generated questions are not in the expected format (array of strings).");
      }
    } catch (parseError: any) {
      console.error("Failed to parse generated questions:", parseError.message);
      console.error("Raw text received from Gemini:", questionsText);
      return NextResponse.json(
        { success: false, message: `Failed to parse questions generated by AI. Error: ${parseError.message}` },
        { status: 500 }
      );
    }

    const interviewData = {
      role: role,
      type: type,
      level: level,
      techstack: typeof techstack === 'string' ? techstack.split(",").map((s: string) => s.trim()) : Array.isArray(techstack) ? techstack : [],
      questions: questions,
      userId: userid,
      finalized: false,
      coverImage: getRandomInterviewCover(),
      createdAt: new Date().toISOString(),
    };

    const interviewRef = await db.collection("interviews").add(interviewData);

    return NextResponse.json({ success: true, interviewId: interviewRef.id }, { status: 200 });
  } catch (error: any) {
    console.error("Error in POST /api/generate:", error);
    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred";
    return NextResponse.json({ success: false, error: errorMessage }, { status: 500 });
  }
}

export async function GET() {
  return NextResponse.json({ success: true, message: "GET request successful. Use POST to generate interviews." }, { status: 200 });
} 